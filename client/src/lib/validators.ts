import { z } from "zod";

// --- API Response Schemas ---

export const errorSchema = z.object({
  message: z.string(),
});

export const leadSchema = z.object({
  id: z.string().min(1, "ID is required"),
  firstName: z.string().min(1, "First name is required"),
  lastName: z.string().min(1, "Last name is required"),
  email: z.string().email("Invalid email address").min(1, "Email is required"),
  phone: z.string().optional(),
  companyName: z.string().min(1, "Company name is required"),
  leadSource: z.string().optional(),
  notes: z.string().optional(),
  status: z.string().min(1, "Status is required"), // e.g., New, Qualified, Converted
  qualificationNotes: z.string().optional(),
  budgetEstimate: z.string().optional(),
  nextSteps: z.string().optional(),
  qualificationDate: z.string().optional(), // ISO date string
  accountId: z.string().optional(),
  contactId: z.string().optional(),
  opportunityName: z.string().optional(),
  conversionNotes: z.string().optional(),
  convertedBy: z.string().optional(),
});

// --- API Request Schemas ---

// For creating a lead, the ID is generated by the backend, so we omit it from the client request.
export const createLeadRequestSchema = leadSchema.pick({
  firstName: true,
  lastName: true,
  email: true,
  phone: true,
  companyName: true,
  leadSource: true,
  notes: true,
}).extend({
  // The OpenAPI spec lists 'id' as required in CreateLeadRequest, but the instructions say "ID will be set on backend, do not include them in the forms."
  // For the actual client payload, we'll omit it. The backend will generate it.
  // If the backend truly expected client-generated IDs, this would be `id: z.string().min(1, "ID is required for creation")`
});

// For qualifying a lead, the ID refers to an existing lead, and we update specific fields.
export const qualifyLeadRequestSchema = z.object({
  id: z.string().min(1, "Lead ID is required"),
  status: z.string().min(1, "Status is required"),
  qualificationNotes: z.string().optional(),
  budgetEstimate: z.string().optional(),
  nextSteps: z.string().optional(),
  qualificationDate: z.string().optional(), // Use `date-fns` for formatting to ISO string
});

// For converting a lead, the ID refers to an existing lead, and we update specific fields.
export const convertLeadRequestSchema = z.object({
  id: z.string().min(1, "Lead ID is required"),
  accountId: z.string().min(1, "Account ID is required"),
  contactId: z.string().min(1, "Contact ID is required"),
  opportunityName: z.string().min(1, "Opportunity name is required"),
  conversionNotes: z.string().optional(),
  convertedBy: z.string().optional(),
});


// --- Inferred Types ---

export type Lead = z.infer<typeof leadSchema>;
export type ErrorResponse = z.infer<typeof errorSchema>;

// Payloads sent from client to server for mutations
export type CreateLeadPayload = z.infer<typeof createLeadRequestSchema>;
export type QualifyLeadPayload = z.infer<typeof qualifyLeadRequestSchema>;
export type ConvertLeadPayload = z.infer<typeof convertLeadRequestSchema>;